1. Singleton Pattern

 Exercise 1:
Create a simple logging system (logger) where only one instance of the Logger class is allowed. Make sure that no matter how many times the instance getter method is called, the same instance will always be returned. Add methods to allow logging of messages.
Hint: Use a private constructor and a static getter for the instance.

    Exercise 2:
Build a system for a personal computer using the Builder pattern. 
The Computer class should have components such as: processor, RAM, storage and video card. 
Make sure you can create different computer configurations (gaming, office, etc.) using the same builder.

Hint: Make sure you don't have to specify all the components for each computer. 
For example, an office computer might only have RAM and a processor, without a dedicated video card.

2. Builder Pattern

    Exercise 1:
Create a builder for a Pizza class. A pizza can have various ingredients (eg cheese, ham, mushrooms, etc.), 
sizes and type of dough (thin, fluffy). Use the Builder pattern to create pizza instances with different combinations of ingredients.
Hint: The Pizza class should only have one private constructor, and the actual creation should be done via a PizzaBuilder.

    Exercise 2:
Build a system for a personal computer using the Builder pattern. 
The Computer class should have components such as: processor, RAM, storage and video card. 
Make sure you can create different computer configurations (gaming, office, etc.) using the same builder.

Hint: Make sure you don't have to specify all the components for each computer. For example, an office computer might only have RAM and a processor, without a dedicated video card.

3. Factory Method Pattern 

    Exercise 1: 
Create a vehicle system in care class of base Vehicle are class derived from Car, Bike and Truck. Folosește patternul Factory Method pentru a creationa VehicleFactory care decides ce type of vehicle să creeze based on a given parameter (for example, type of vehicle).
Hint: Factory Method is used to instantly return to the Vehicle class, its subclass comes out to implement the specific behavior of the vehicle.

    Exercise 2: 
Implement a notification system. Create the abstract class Notification if the class derives from SMSNotification, EmailNotification or PushNotification. Utilizează Factory Method to decide on the type of notifications that appear in the function of preferred usage (SMS, email, push).
Hint: Factory-ul va trebui să instantaneously returns the class value derived from a parameter (for example, a string or constant).

4. Adapter Pattern

    Exercise 1: Payment System
Let's imagine that you have an application that uses an existing class OldPaymentSystem, which has a method makePayment(String customerName, double amount).
You recently added a new payment system, NewPaymentSystem, which uses a processTransaction(String customerName, double amount, String currency) method.
Request: Create a PaymentAdapter class that implements the OldPaymentSystem interface so that you can use NewPaymentSystem instead of OldPaymentSystem without changing the code that uses OldPaymentSystem.

    Exercise 2: Adaptation of Graphical Interfaces
You have a graphics drawing program where you use the Shape interface, which defines a draw() method.
The new library you are using defines a FancyShape class that has a render() method for drawing, different from draw().
Request: Create a FancyShapeAdapter class that implements the Shape interface, thus allowing FancyShape objects to be used in your current program by calling the draw() method.

5. Decorator Pattern 

    Exercise 1: Alarm Notifications
Let's imagine you have a BasicNotification class that sends simple notifications via the send() method.
You want to add email and SMS notification options without modifying the BasicNotification class.
Request: Create EmailNotificationDecorator and SMSNotificationDecorator decorators to add additional functionality for sending email and SMS notifications, following the decorator principle.

5. Observer

Exercise 1: User notification system

In an app, users can subscribe to notifications for various events (eg, a product's price change, new offers, etc.).
Create a mechanism to allow users to subscribe and be notified when important changes occur.
Each type of notification must be sent only to users subscribed to that specific event.

Exercise 2: Monitoring stocks in a store

You have an inventory management system in a store, and certain products have limited stock.
When a product reaches a minimum quantity, the system must send alerts to multiple departments (eg procurement, sales) to initiate replenishment.
Implement an implementation to monitor inventory levels and send notifications to subscribing departments when inventory drops below a predetermined threshold.